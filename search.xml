<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>LeetCode--整数反转</title>
    <url>/Java/Reverse-integere/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给出一个32位的有符号整数,你需要将这个整数中每位上的数字进行反转。</p>
<h3 id="示例1："><a href="#示例1：" class="headerlink" title="示例1："></a>示例1：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">输入: 123</span><br><span class="line">输出: 321</span><br></pre></td></tr></table></figure>
<h3 id="示例2："><a href="#示例2：" class="headerlink" title="示例2："></a>示例2：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">输入: -123</span><br><span class="line">输出: -321</span><br></pre></td></tr></table></figure>
<h3 id="示例3："><a href="#示例3：" class="headerlink" title="示例3："></a>示例3：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">输入: 120</span><br><span class="line">输出: 21</span><br></pre></td></tr></table></figure>
<h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>n位的有符号整数意思是说范围在[−2^(n−1),2^(n−1)−1]，那么32位有符号整数范围是[−2^31,2^31−1]也就是-2147483648到2147483647超出这个范围视为溢出则返回0.</p>
<ul>
<li>溢出条件有两个，一个是大于整数最大值MAX_VALUE，另一个是小于整数最小值MIN_VALUE，设当前计算结果为ans，pop为x每次除10的余数(个位数)</li>
</ul>
<ol>
<li>从ans * 10 + pop &gt; MAX_VALUE这个溢出条件来看<br> 当出现 ans &gt; MAX_VALUE / 10 且还有pop需要添加时，则一定溢出<br> 当出现 ans == MAX_VALUE / 10 且 pop &gt; 7时，则一定溢出，7是2^31 - 1的个位数。</li>
<li>从ans * 10 + pop &lt; MIN_VALUE这个溢出条件来看<br> 当出现 ans &lt; MIN_VALUE / 10 且 还有pop需要添加 时，则一定溢出<br> 当出现 ans == MIN_VALUE / 10 且 pop &lt; -8 时，则一定溢出，8是-2^31的个位数</li>
</ol>
<h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int reverse(int x) &#123;</span><br><span class="line">        int ans=0;</span><br><span class="line">        <span class="keyword">while</span>(x!=0)&#123;</span><br><span class="line">            int pop=x%10;</span><br><span class="line">            <span class="keyword">if</span>(ans&gt;Integer.MAX_VALUE/10||(ans==Integer.MAX_VALUE/10&amp;&amp;pop&gt;7))<span class="built_in">return</span> 0;</span><br><span class="line">            <span class="keyword">if</span>(ans&lt;Integer.MIN_VALUE/10||(ans==Integer.MIN_VALUE/10&amp;&amp;pop&lt;-8))<span class="built_in">return</span> 0;</span><br><span class="line">            ans=ans*10+pop;</span><br><span class="line">            x/=10;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>LeetCode题目</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode--两数之和</title>
    <url>/Java/hello-world/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p>
<h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">给定 nums = [3, 5, 8,12], target = 11</span><br><span class="line"></span><br><span class="line">因为 nums[0] + nums[2] = 3 + 8 = 11</span><br><span class="line">所以返回 [0,2]</span><br></pre></td></tr></table></figure>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="两次循环遍历完所有的可能"><a href="#两次循环遍历完所有的可能" class="headerlink" title="两次循环遍历完所有的可能"></a>两次循环遍历完所有的可能</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int[] twoSum(int[] nums, int target) &#123; //给定的数组，目标值(两数之和)</span><br><span class="line">        <span class="keyword">for</span>(int i=0;i&lt;nums.length;i++)&#123;	//从下标为0的数开始到小于数组长度的值为止</span><br><span class="line">            <span class="keyword">for</span>(int j=i+1;j&lt;nums.length;j++)&#123;//不能重复下标从i+1开始</span><br><span class="line">                <span class="keyword">if</span>(nums[j]==target-nums[i])&#123;//两数之和等于目标值target</span><br><span class="line">                    <span class="built_in">return</span> new int[]&#123;i,j&#125;;//返回数组</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        throw new IllegalArgumentException(<span class="string">"No two sum solution"</span>);//手动抛出异常</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>LeetCode题目</tag>
      </tags>
  </entry>
</search>
